/*
 * main.c
 *
 *  Created on: 6 но€б. 2017 г.
 *      Author: Laptop
 */

#include <xil_io.h>

#define TIMER_ADDRESS 0x41C00000
#define GPIO_ADDRESS  0x40000000
#define AXI_UARLITE_ADDRESS 0x40600000
#define MY_TIMER1_ADDRESS 0xC0000000
#define MY_TIMER2_ADDRESS 0xC000000C
#define MY_OC_ADDRESS 0xC00000018

u32 t_old = 0;

void int_handler(void) __attribute__ ((interrupt_handler));

void int_handler(void)
{
	u8 inData = Xil_In8(AXI_UARLITE_ADDRESS);

	// Output Compare
	Xil_Out32(MY_OC_ADDRESS + 0x1C, 0x2);
	cpu.bus_write(0x18, 0x3);
	// Timer 1 start
	cpu.bus_write(0x0, 0x6);
	cpu.bus_write(0x8, 0x2);
	// Timer 2 start
	cpu.bus_write(0xC, 0x5);
	cpu.bus_write(0x14, 0x2);

//	Xil_Out32(AXI_TIMER_1_ADDRESS + TCS_OFFSET, INTERRUPT | ENT | ENIT | ARHT | DTM);
//	if (cycle == THIRD) {
//		cycle = FIRST;
//	} else {
//		cycle++;
//	}
//	Xil_Out32(AXI_TIMER_0_ADDRESS + TL_OFFSET, LOW_TIME + high_time[cycle] - 2);
//	Xil_Out32(AXI_TIMER_0_ADDRESS + TIMER1_OFFSET + TL_OFFSET, high_time[cycle] - 2);
//
//	Xil_Out32(GPIO_ADDRESS, high_time[cycle] * 10);
}

int main()
{
	// AXI Timer configuration
	Xil_Out32(TIMER_ADDRESS, 0x99);

//	while(1)
//	{
//		// timer 1 control register data
//		u32 c1 = Xil_In32(TIMER_ADDRESS);
//
//		// capture is occurred
//		if (c1 & 0x100)
//		{
//			// timer 1 load register data
//			u32 t = Xil_In32(TIMER_ADDRESS + 0x04);
//
//			if (t_old != 0)
//				Xil_Out32(GPIO_ADDRESS, t - t_old);
//
//			t_old = t;
//
//			// clear TINT flag
//			Xil_Out32(TIMER_ADDRESS, 0x199);
//		}
//	}
	Xil_Out32(0xC0000008, 0x2);
}


